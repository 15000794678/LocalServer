//
//  File generated by HDevelop for HALCON/DOTNET (C#) Version 10.0
//

using HalconDotNet;

namespace IdentifScreem_Reset
{
    public partial class HDevelopExport
    {
#if !NO_EXPORT_APP_MAIN
        public HDevelopExport()
        {
            // Default settings used in HDevelop 
            HOperatorSet.SetSystem("do_low_error", "false");
            action();
        }
#endif

        // Procedures 
        // Local procedures 
        public void ConnectCamera(out HTuple hv_AcqHandle)
        {
            // Initialize local and output iconic variables 

            HOperatorSet.OpenFramegrabber("DirectShow", 1, 1, 0, 0, 0, 0, "default", 8, "rgb",
                -1, "false", "default", "USB Camera", 0, -1, out hv_AcqHandle);

            return;
        }

        public void DisconnectCamera(HTuple hv_AcqHandle)
        {

            // Initialize local and output iconic variables 

            HOperatorSet.CloseFramegrabber(hv_AcqHandle);

            return;
        }

        public void get_image_from_camera(ref HObject ho_Image, HTuple hv_AcqHandle)
        {

            // Initialize local and output iconic variables 
            // HOperatorSet.GenEmptyObj(out ho_Image);

            ho_Image.Dispose();
            HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
            

            return;
        }

        public void do_inspect(HObject ho_Image, HTuple hv_lightBoxModelPath, HTuple hv_resetModelPath,
            HTuple hv_cancelLightBoxPath, out HTuple hv_outport_result)
        {



            // Local control variables 

            HTuple hv_lightModelID, hv_resetModelID, hv_cancelModelID;
            HTuple hv_lightModelRow, hv_lightModelColumn, hv_lightModelAngle;
            HTuple hv_lightModelScore, hv_resetModelRow, hv_resetModelColumn;
            HTuple hv_resetModelAngle, hv_resetModelScore, hv_cancelModelRow;
            HTuple hv_cancelModelColumn, hv_cancelModelAngle, hv_cancelModelScore;

            // Initialize local and output iconic variables 

            hv_outport_result = new HTuple();
            //read_image (Image, fileName)

            HOperatorSet.ReadNccModel(hv_lightBoxModelPath, out hv_lightModelID);
            HOperatorSet.ReadNccModel(hv_resetModelPath, out hv_resetModelID);
            HOperatorSet.ReadNccModel(hv_cancelLightBoxPath, out hv_cancelModelID);
            HOperatorSet.FindNccModel(ho_Image, hv_lightModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_lightModelRow, out hv_lightModelColumn, out hv_lightModelAngle,
                out hv_lightModelScore);
            HOperatorSet.FindNccModel(ho_Image, hv_resetModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_resetModelRow, out hv_resetModelColumn, out hv_resetModelAngle,
                out hv_resetModelScore);
            HOperatorSet.FindNccModel(ho_Image, hv_cancelModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_cancelModelRow, out hv_cancelModelColumn, out hv_cancelModelAngle,
                out hv_cancelModelScore);
            if ((int)((new HTuple((new HTuple(hv_lightModelScore.TupleLength())).TupleEqual(
                1))).TupleAnd(new HTuple(hv_lightModelScore.TupleGreater(0.75)))) != 0)
            {
                if ((int)((new HTuple((new HTuple(hv_cancelModelScore.TupleLength())).TupleEqual(
                    1))).TupleAnd(new HTuple(hv_cancelModelScore.TupleGreater(0.75)))) != 0)
                {
                    hv_outport_result[0] = 2;
                    hv_outport_result[1] = ((hv_lightModelRow.TupleSelect(0))).TupleInt();
                    hv_outport_result[2] = ((hv_lightModelColumn.TupleSelect(0))).TupleInt();
                    hv_outport_result[3] = ((hv_cancelModelRow.TupleSelect(0))).TupleInt();
                    hv_outport_result[4] = ((hv_cancelModelColumn.TupleSelect(0))).TupleInt()
                        ;
                }
                else
                {
                    hv_outport_result = new HTuple();
                    hv_outport_result[0] = 3;
                    hv_outport_result[1] = 3;
                    hv_outport_result[2] = 3;
                }
            }
            else if ((int)((new HTuple((new HTuple(hv_resetModelScore.TupleLength()
                )).TupleEqual(1))).TupleAnd(new HTuple(hv_resetModelScore.TupleGreater(0.75)))) != 0)
            {
                hv_outport_result = new HTuple();
                hv_outport_result[0] = 1;
                hv_outport_result[1] = 1;
                hv_outport_result[2] = 1;
            }
            else
            {
                hv_outport_result = new HTuple();
                hv_outport_result[0] = 0;
                hv_outport_result[1] = 0;
                hv_outport_result[2] = 0;
            }
            HOperatorSet.ClearNccModel(hv_lightModelID);
            HOperatorSet.ClearNccModel(hv_resetModelID);
            HOperatorSet.ClearNccModel(hv_cancelModelID);

            return;
        }

        public void get_image_from_file(ref HObject ho_Image, HTuple hv_filename)
        {


            // Local control variables 

            // Initialize local and output iconic variables 
            //HOperatorSet.GenEmptyObj(out ho_Image);

            ho_Image.Dispose();
            HOperatorSet.ReadImage(out ho_Image, hv_filename);
            //get_image_size (Image, Width, Height)

            return;
        }

        public void do_inspect2(HTuple hv_fileName, out HTuple hv_outport_result)
        {


            // Local iconic variables 

            HObject ho_Image, ho_Image1 = null, ho_Regions;
            HObject ho_ConnectedRegions, ho_SelectedRegions, ho_SelectedRegions1;


            // Local control variables 

            HTuple hv_Width, hv_Height, hv_Rectangularity;
            HTuple hv_Area, hv_ModelRow, hv_ModelColumn, hv_FindModelRowNum = new HTuple();
            HTuple hv_FindModelColumnNum = new HTuple();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Image);
            HOperatorSet.GenEmptyObj(out ho_Image1);
            HOperatorSet.GenEmptyObj(out ho_Regions);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);

            hv_outport_result = new HTuple();
            ho_Image.Dispose();
            HOperatorSet.ReadImage(out ho_Image, hv_fileName);
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);
            ho_Regions.Dispose();
            HOperatorSet.Threshold(ho_Image1, out ho_Regions, 0, 2);
            ho_ConnectedRegions.Dispose();
            HOperatorSet.Connection(ho_Regions, out ho_ConnectedRegions);
            HOperatorSet.Rectangularity(ho_ConnectedRegions, out hv_Rectangularity);
            ho_SelectedRegions.Dispose();
            HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "Rectangularity",
                "and", 0.8, 1);
            ho_SelectedRegions1.Dispose();
            HOperatorSet.SelectShape(ho_SelectedRegions, out ho_SelectedRegions1, "area",
                "and", 130000, 158720);
            HOperatorSet.AreaCenter(ho_SelectedRegions1, out hv_Area, out hv_ModelRow, out hv_ModelColumn);

            if ((int)(new HTuple((new HTuple(hv_Area.TupleLength())).TupleEqual(0))) != 0)
            {
                hv_outport_result = 0;
            }
            else
            {
                hv_outport_result[0] = new HTuple(hv_Area.TupleLength());
                hv_outport_result[1] = hv_Width.TupleInt();
                hv_outport_result[2] = hv_Height.TupleInt();
                for (hv_FindModelRowNum = 3; (int)hv_FindModelRowNum <= (int)((new HTuple(hv_Area.TupleLength()
                    )) + 2); hv_FindModelRowNum = (int)hv_FindModelRowNum + 1)
                {
                    hv_outport_result[hv_FindModelRowNum] = ((hv_ModelRow.TupleSelect(hv_FindModelRowNum - 3))).TupleInt()
                        ;
                }
                for (hv_FindModelColumnNum = (new HTuple(hv_Area.TupleLength())) + 3; (int)hv_FindModelColumnNum <= (int)(((new HTuple(hv_Area.TupleLength()
                    )) + (new HTuple(hv_Area.TupleLength()))) + 2); hv_FindModelColumnNum = (int)hv_FindModelColumnNum + 1)
                {
                    hv_outport_result[hv_FindModelColumnNum] = ((hv_ModelColumn.TupleSelect((hv_FindModelColumnNum - (new HTuple(hv_Area.TupleLength()
                        ))) - 3))).TupleInt();
                }
            }


            ho_Image.Dispose();
            ho_Image1.Dispose();
            ho_Regions.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_SelectedRegions1.Dispose();

            return;
        }

        public void do_inspect1(HObject ho_Image, HTuple hv_okPath, HTuple hv_notokPath,
            HTuple hv_testingPath, HTuple hv_startingPath, out HTuple hv_outport_result)
        {



            // Local control variables 

            HTuple hv_Width, hv_Height, hv_okModelID, hv_notokModelID;
            HTuple hv_testingModelID, hv_startingModelID, hv_okModelRow;
            HTuple hv_okModelColumn, hv_okModelAngle, hv_okModelScore;
            HTuple hv_notokModelRow, hv_notokModelColumn, hv_notokModelAngle;
            HTuple hv_notokModelScore, hv_testingModelRow, hv_testingModelColumn;
            HTuple hv_testingModelAngle, hv_testingModelScore, hv_startingModelRow;
            HTuple hv_startingModelColumn, hv_startingModelAngle, hv_startingModelScore;

            // Initialize local and output iconic variables 

            hv_outport_result = new HTuple();
            //read_image (Image, fileName)
            HOperatorSet.GetImageSize(ho_Image, out hv_Width, out hv_Height);

            HOperatorSet.ReadNccModel(hv_okPath, out hv_okModelID);
            HOperatorSet.ReadNccModel(hv_notokPath, out hv_notokModelID);
            HOperatorSet.ReadNccModel(hv_testingPath, out hv_testingModelID);
            HOperatorSet.ReadNccModel(hv_startingPath, out hv_startingModelID);

            HOperatorSet.FindNccModel(ho_Image, hv_okModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_okModelRow, out hv_okModelColumn, out hv_okModelAngle, out hv_okModelScore);
            HOperatorSet.FindNccModel(ho_Image, hv_notokModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_notokModelRow, out hv_notokModelColumn, out hv_notokModelAngle,
                out hv_notokModelScore);
            HOperatorSet.FindNccModel(ho_Image, hv_testingModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_testingModelRow, out hv_testingModelColumn, out hv_testingModelAngle,
                out hv_testingModelScore);
            HOperatorSet.FindNccModel(ho_Image, hv_startingModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_startingModelRow, out hv_startingModelColumn, out hv_startingModelAngle,
                out hv_startingModelScore);

            if ((int)((new HTuple((new HTuple(hv_okModelScore.TupleLength())).TupleEqual(
                1))).TupleAnd(new HTuple(hv_okModelScore.TupleGreater(0.75)))) != 0)
            {
                hv_outport_result[0] = 2;
            }
            else if ((int)((new HTuple((new HTuple(hv_notokModelScore.TupleLength()
                )).TupleEqual(1))).TupleAnd(new HTuple(hv_notokModelScore.TupleGreater(0.75)))) != 0)
            {
                hv_outport_result[0] = 3;
            }
            else if ((int)((new HTuple((new HTuple(hv_testingModelScore.TupleLength()
                )).TupleEqual(1))).TupleAnd(new HTuple(hv_testingModelScore.TupleGreater(
                0.75)))) != 0)
            {
                hv_outport_result[0] = 1;
            }
            else if ((int)((new HTuple((new HTuple(hv_startingModelScore.TupleLength()
                )).TupleEqual(1))).TupleAnd(new HTuple(hv_startingModelScore.TupleGreater(
                0.75)))) != 0)
            {
                hv_outport_result[0] = 0;
            }
            else
            {
                hv_outport_result[0] = 1;
            }



            HOperatorSet.ClearNccModel(hv_okModelID);
            HOperatorSet.ClearNccModel(hv_notokModelID);
            HOperatorSet.ClearNccModel(hv_testingModelID);
            HOperatorSet.ClearNccModel(hv_startingModelID);

            return;
        }

        public void get_image_resolution(HObject ho_Image, out HTuple hv_out_resolution)
        {

            // Initialize local and output iconic variables 

            hv_out_resolution = new HTuple();

            return;
        }

        public void read_light_state (HObject ho_Image, HTuple hv_blue_num, HTuple hv_red_num, 
            HTuple hv_yellow_num, out HTuple hv_outport_result)
        {


            // Local iconic variables 
            HOperatorSet.WriteImage(ho_Image, "jpeg", 0, "light");
            HObject ho_Rectangle, ho_lightImageReduced;
            HObject ho_ImageReducedChannel3, ho_lightRegions;


            // Local control variables 

            HTuple hv_lightArea, hv_lightRow, hv_lightColumn;

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_lightImageReduced);
            HOperatorSet.GenEmptyObj(out ho_ImageReducedChannel3);
            HOperatorSet.GenEmptyObj(out ho_lightRegions);

            hv_outport_result = new HTuple();
            ho_Rectangle.Dispose();
            HOperatorSet.GenRectangle1(out ho_Rectangle, 215, 395, 300, 435);
            ho_lightImageReduced.Dispose();
            HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_lightImageReduced);
            //rgb1_to_gray (lightImageReduced, grayImage)
            ho_ImageReducedChannel3.Dispose();
            HOperatorSet.AccessChannel(ho_lightImageReduced, out ho_ImageReducedChannel3, 
                3);
            ho_lightRegions.Dispose();
            HOperatorSet.Threshold(ho_ImageReducedChannel3, out ho_lightRegions, 157, 255);
            HOperatorSet.AreaCenter(ho_lightRegions, out hv_lightArea, out hv_lightRow, out hv_lightColumn);
			hv_outport_result[1] = hv_lightArea.TupleInt();
            if ((int)(new HTuple(hv_lightArea.TupleGreater(hv_blue_num))) != 0)
            {
              //blue light 1000
              hv_outport_result[0] = 3;
            }
            else if ((int)(new HTuple(hv_lightArea.TupleGreater(hv_red_num))) != 0)
            {
              //red light 400
              hv_outport_result[0] = 2;
            }
            else if ((int)(new HTuple(hv_lightArea.TupleGreater(hv_yellow_num))) != 0)
            {
              //yellow light 40
              hv_outport_result[0] = 1;
            }
            else
            {
              //no light
              hv_outport_result[0] = 0;
            }
            ho_Rectangle.Dispose();
            ho_lightImageReduced.Dispose();
            ho_ImageReducedChannel3.Dispose();
            ho_lightRegions.Dispose();

            return;
        }

        public void do_inspect3(HObject ho_Image, HTuple hv_testNumPath, HTuple hv_testTimePath,
            out HTuple hv_outportResult)
        {



            // Local control variables 

            HTuple hv_testNumModelID, hv_testTimeModelID;
            HTuple hv_testNumModelRow, hv_testNumModelColumn, hv_testNumModelAngle;
            HTuple hv_testNumModelScore, hv_testTimeModelRow, hv_testTimeModelColumn;
            HTuple hv_testTimeModelAngle, hv_testTimeModelScore;

            // Initialize local and output iconic variables 

            hv_outportResult = new HTuple();
            HOperatorSet.ReadNccModel(hv_testNumPath, out hv_testNumModelID);
            HOperatorSet.ReadNccModel(hv_testTimePath, out hv_testTimeModelID);
            HOperatorSet.FindNccModel(ho_Image, hv_testNumModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_testNumModelRow, out hv_testNumModelColumn, out hv_testNumModelAngle,
                out hv_testNumModelScore);
            HOperatorSet.FindNccModel(ho_Image, hv_testTimeModelID, 0, 0, 0.5, 1, 0.5, "true",
                0, out hv_testTimeModelRow, out hv_testTimeModelColumn, out hv_testTimeModelAngle,
                out hv_testTimeModelScore);
            if ((int)((new HTuple((new HTuple((new HTuple((new HTuple(hv_testNumModelScore.TupleLength()
                )).TupleEqual(1))).TupleAnd(new HTuple(hv_testNumModelScore.TupleGreater(
                0.75))))).TupleAnd(new HTuple((new HTuple(hv_testTimeModelScore.TupleLength()
                )).TupleEqual(1))))).TupleAnd(new HTuple(hv_testTimeModelScore.TupleGreater(
                0.75)))) != 0)
            {
                hv_outportResult = new HTuple();
                hv_outportResult[0] = 1;
                hv_outportResult[1] = 1;
                hv_outportResult[2] = 1;
            }
            else
            {
                hv_outportResult = new HTuple();
                hv_outportResult[0] = 0;
                hv_outportResult[1] = 0;
                hv_outportResult[2] = 0;
            }

            HOperatorSet.ClearNccModel(hv_testNumModelID);
            HOperatorSet.ClearNccModel(hv_testTimeModelID);



            return;
        }

        // Main procedure 
        private void action()
        {

            // Local iconic variables 


            // Local control variables 

            // Initialize local and output iconic variables 



            //get_image_from_file (Image, 'C:/Users/shen/Desktop/model/success.bmp')
            //do_inspect1 (Image, 'C:/Users/shen/Desktop/model/rightResult.ncm', 'C:/Users/shen/Desktop/model/testover.ncm', testingPath, startingPath, outport_result)




            return;

        }


    }
#if !NO_EXPORT_APP_MAIN
    public class HDevelopExportApp
    {
        //static void Main(string[] args)
        //{
        //  new HDevelopExport();
        //}
    }
#endif
}
